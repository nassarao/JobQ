//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JQJMCLI.JobManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobManager.ICourier")]
    public interface ICourier {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourier/DispatchJob", ReplyAction="http://tempuri.org/ICourier/DispatchJobResponse")]
        JobQ.Job DispatchJob(JobQ.Machine requestingClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourier/DispatchJob", ReplyAction="http://tempuri.org/ICourier/DispatchJobResponse")]
        System.Threading.Tasks.Task<JobQ.Job> DispatchJobAsync(JobQ.Machine requestingClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourier/ReturnJob", ReplyAction="http://tempuri.org/ICourier/ReturnJobResponse")]
        string ReturnJob(JobQ.Job job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourier/ReturnJob", ReplyAction="http://tempuri.org/ICourier/ReturnJobResponse")]
        System.Threading.Tasks.Task<string> ReturnJobAsync(JobQ.Job job);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICourierChannel : JQJMCLI.JobManager.ICourier, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CourierClient : System.ServiceModel.ClientBase<JQJMCLI.JobManager.ICourier>, JQJMCLI.JobManager.ICourier {
        
        public CourierClient() {
        }
        
        public CourierClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CourierClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CourierClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CourierClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JobQ.Job DispatchJob(JobQ.Machine requestingClient) {
            return base.Channel.DispatchJob(requestingClient);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job> DispatchJobAsync(JobQ.Machine requestingClient) {
            return base.Channel.DispatchJobAsync(requestingClient);
        }
        
        public string ReturnJob(JobQ.Job job) {
            return base.Channel.ReturnJob(job);
        }
        
        public System.Threading.Tasks.Task<string> ReturnJobAsync(JobQ.Job job) {
            return base.Channel.ReturnJobAsync(job);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobManager.IJobManager")]
    public interface IJobManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/CreateJob", ReplyAction="http://tempuri.org/IJobManager/CreateJobResponse")]
        JobQ.Job CreateJob(string cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/CreateJob", ReplyAction="http://tempuri.org/IJobManager/CreateJobResponse")]
        System.Threading.Tasks.Task<JobQ.Job> CreateJobAsync(string cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/CreateJobWithName", ReplyAction="http://tempuri.org/IJobManager/CreateJobWithNameResponse")]
        JobQ.Job CreateJobWithName(string cmd, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/CreateJobWithName", ReplyAction="http://tempuri.org/IJobManager/CreateJobWithNameResponse")]
        System.Threading.Tasks.Task<JobQ.Job> CreateJobWithNameAsync(string cmd, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/CreateJobRange", ReplyAction="http://tempuri.org/IJobManager/CreateJobRangeResponse")]
        JobQ.Job[] CreateJobRange(string[] cmds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/CreateJobRange", ReplyAction="http://tempuri.org/IJobManager/CreateJobRangeResponse")]
        System.Threading.Tasks.Task<JobQ.Job[]> CreateJobRangeAsync(string[] cmds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetJob", ReplyAction="http://tempuri.org/IJobManager/GetJobResponse")]
        JobQ.Job GetJob(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetJob", ReplyAction="http://tempuri.org/IJobManager/GetJobResponse")]
        System.Threading.Tasks.Task<JobQ.Job> GetJobAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetAllJobs", ReplyAction="http://tempuri.org/IJobManager/GetAllJobsResponse")]
        JobQ.Job[] GetAllJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetAllJobs", ReplyAction="http://tempuri.org/IJobManager/GetAllJobsResponse")]
        System.Threading.Tasks.Task<JobQ.Job[]> GetAllJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetAllExecutedJobs", ReplyAction="http://tempuri.org/IJobManager/GetAllExecutedJobsResponse")]
        JobQ.Job[] GetAllExecutedJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetAllExecutedJobs", ReplyAction="http://tempuri.org/IJobManager/GetAllExecutedJobsResponse")]
        System.Threading.Tasks.Task<JobQ.Job[]> GetAllExecutedJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetAllUnexecutedJobs", ReplyAction="http://tempuri.org/IJobManager/GetAllUnexecutedJobsResponse")]
        JobQ.Job[] GetAllUnexecutedJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/GetAllUnexecutedJobs", ReplyAction="http://tempuri.org/IJobManager/GetAllUnexecutedJobsResponse")]
        System.Threading.Tasks.Task<JobQ.Job[]> GetAllUnexecutedJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/UpdateJob", ReplyAction="http://tempuri.org/IJobManager/UpdateJobResponse")]
        JobQ.Job UpdateJob(int id, string cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/UpdateJob", ReplyAction="http://tempuri.org/IJobManager/UpdateJobResponse")]
        System.Threading.Tasks.Task<JobQ.Job> UpdateJobAsync(int id, string cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/UpdateJobWithName", ReplyAction="http://tempuri.org/IJobManager/UpdateJobWithNameResponse")]
        JobQ.Job UpdateJobWithName(int id, string cmd, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/UpdateJobWithName", ReplyAction="http://tempuri.org/IJobManager/UpdateJobWithNameResponse")]
        System.Threading.Tasks.Task<JobQ.Job> UpdateJobWithNameAsync(int id, string cmd, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/DeleteJob", ReplyAction="http://tempuri.org/IJobManager/DeleteJobResponse")]
        void DeleteJob(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobManager/DeleteJob", ReplyAction="http://tempuri.org/IJobManager/DeleteJobResponse")]
        System.Threading.Tasks.Task DeleteJobAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJobManagerChannel : JQJMCLI.JobManager.IJobManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JobManagerClient : System.ServiceModel.ClientBase<JQJMCLI.JobManager.IJobManager>, JQJMCLI.JobManager.IJobManager {
        
        public JobManagerClient() {
        }
        
        public JobManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JobManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JobQ.Job CreateJob(string cmd) {
            return base.Channel.CreateJob(cmd);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job> CreateJobAsync(string cmd) {
            return base.Channel.CreateJobAsync(cmd);
        }
        
        public JobQ.Job CreateJobWithName(string cmd, string username) {
            return base.Channel.CreateJobWithName(cmd, username);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job> CreateJobWithNameAsync(string cmd, string username) {
            return base.Channel.CreateJobWithNameAsync(cmd, username);
        }
        
        public JobQ.Job[] CreateJobRange(string[] cmds) {
            return base.Channel.CreateJobRange(cmds);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job[]> CreateJobRangeAsync(string[] cmds) {
            return base.Channel.CreateJobRangeAsync(cmds);
        }
        
        public JobQ.Job GetJob(int id) {
            return base.Channel.GetJob(id);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job> GetJobAsync(int id) {
            return base.Channel.GetJobAsync(id);
        }
        
        public JobQ.Job[] GetAllJobs() {
            return base.Channel.GetAllJobs();
        }
        
        public System.Threading.Tasks.Task<JobQ.Job[]> GetAllJobsAsync() {
            return base.Channel.GetAllJobsAsync();
        }
        
        public JobQ.Job[] GetAllExecutedJobs() {
            return base.Channel.GetAllExecutedJobs();
        }
        
        public System.Threading.Tasks.Task<JobQ.Job[]> GetAllExecutedJobsAsync() {
            return base.Channel.GetAllExecutedJobsAsync();
        }
        
        public JobQ.Job[] GetAllUnexecutedJobs() {
            return base.Channel.GetAllUnexecutedJobs();
        }
        
        public System.Threading.Tasks.Task<JobQ.Job[]> GetAllUnexecutedJobsAsync() {
            return base.Channel.GetAllUnexecutedJobsAsync();
        }
        
        public JobQ.Job UpdateJob(int id, string cmd) {
            return base.Channel.UpdateJob(id, cmd);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job> UpdateJobAsync(int id, string cmd) {
            return base.Channel.UpdateJobAsync(id, cmd);
        }
        
        public JobQ.Job UpdateJobWithName(int id, string cmd, string username) {
            return base.Channel.UpdateJobWithName(id, cmd, username);
        }
        
        public System.Threading.Tasks.Task<JobQ.Job> UpdateJobWithNameAsync(int id, string cmd, string username) {
            return base.Channel.UpdateJobWithNameAsync(id, cmd, username);
        }
        
        public void DeleteJob(int id) {
            base.Channel.DeleteJob(id);
        }
        
        public System.Threading.Tasks.Task DeleteJobAsync(int id) {
            return base.Channel.DeleteJobAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobManager.IClientManager")]
    public interface IClientManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/GetClient", ReplyAction="http://tempuri.org/IClientManager/GetClientResponse")]
        JobQ.Machine GetClient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/GetClient", ReplyAction="http://tempuri.org/IClientManager/GetClientResponse")]
        System.Threading.Tasks.Task<JobQ.Machine> GetClientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/GetAllClients", ReplyAction="http://tempuri.org/IClientManager/GetAllClientsResponse")]
        JobQ.Machine[] GetAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/GetAllClients", ReplyAction="http://tempuri.org/IClientManager/GetAllClientsResponse")]
        System.Threading.Tasks.Task<JobQ.Machine[]> GetAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/DeleteClient", ReplyAction="http://tempuri.org/IClientManager/DeleteClientResponse")]
        void DeleteClient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/DeleteClient", ReplyAction="http://tempuri.org/IClientManager/DeleteClientResponse")]
        System.Threading.Tasks.Task DeleteClientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/CreateClient", ReplyAction="http://tempuri.org/IClientManager/CreateClientResponse")]
        JobQ.Machine CreateClient(JobQ.Machine client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientManager/CreateClient", ReplyAction="http://tempuri.org/IClientManager/CreateClientResponse")]
        System.Threading.Tasks.Task<JobQ.Machine> CreateClientAsync(JobQ.Machine client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientManagerChannel : JQJMCLI.JobManager.IClientManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientManagerClient : System.ServiceModel.ClientBase<JQJMCLI.JobManager.IClientManager>, JQJMCLI.JobManager.IClientManager {
        
        public ClientManagerClient() {
        }
        
        public ClientManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JobQ.Machine GetClient(int id) {
            return base.Channel.GetClient(id);
        }
        
        public System.Threading.Tasks.Task<JobQ.Machine> GetClientAsync(int id) {
            return base.Channel.GetClientAsync(id);
        }
        
        public JobQ.Machine[] GetAllClients() {
            return base.Channel.GetAllClients();
        }
        
        public System.Threading.Tasks.Task<JobQ.Machine[]> GetAllClientsAsync() {
            return base.Channel.GetAllClientsAsync();
        }
        
        public void DeleteClient(int id) {
            base.Channel.DeleteClient(id);
        }
        
        public System.Threading.Tasks.Task DeleteClientAsync(int id) {
            return base.Channel.DeleteClientAsync(id);
        }
        
        public JobQ.Machine CreateClient(JobQ.Machine client) {
            return base.Channel.CreateClient(client);
        }
        
        public System.Threading.Tasks.Task<JobQ.Machine> CreateClientAsync(JobQ.Machine client) {
            return base.Channel.CreateClientAsync(client);
        }
    }
}
